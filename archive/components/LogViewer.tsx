import React, { useEffect, useRef } from 'react';

// Defines the structure for a single log entry
export interface LogEntry { // Exporting for use in page.tsx
  id: string; // Should be unique, e.g., a UUID generated by the server or a timestamp + random number
  timestamp: string | number; // ISO string or Unix timestamp
  level: 'info' | 'warn' | 'error' | 'debug';
  message: string;
}

interface LogViewerProps {
  logs: LogEntry[];
}

const LogViewer: React.FC<LogViewerProps> = ({ logs }) => {
  const scrollableDivRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Auto-scroll to the bottom when new logs are added
    if (scrollableDivRef.current) {
      scrollableDivRef.current.scrollTop = scrollableDivRef.current.scrollHeight;
    }
  }, [logs]);

  const getLogLevelClass = (level: LogEntry['level']) => {
    switch (level) {
      case 'error':
        return 'text-destructive';
      case 'warn':
        return 'text-yellow-500 dark:text-yellow-400'; // Adjusted for dark mode
      case 'info':
        return 'text-blue-600 dark:text-blue-400';
      case 'debug':
        return 'text-gray-500 dark:text-gray-400';
      default:
        return 'text-muted-foreground';
    }
  };

  return (
    <div className="bg-muted border rounded-lg p-4 h-full flex flex-col">
      <h2 className="text-lg font-semibold mb-2 text-foreground">System Logs</h2>
      <div ref={scrollableDivRef} className="flex-grow overflow-y-auto bg-background p-2 rounded text-xs font-[family-name:var(--font-geist-mono)] space-y-1">
        {logs.length === 0 ? (
          <p className="text-muted-foreground italic">No logs yet.</p>
        ) : (
          logs.map((log) => (
            <div key={log.id} className={`whitespace-pre-wrap break-all ${getLogLevelClass(log.level)}`}>
              <span className="text-gray-400 dark:text-gray-500">
                [{new Date(log.timestamp).toLocaleTimeString()}]
              </span>
              <span className={`font-semibold mx-1 ${getLogLevelClass(log.level)}`}>
                [{log.level.toUpperCase()}]
              </span>
              {log.message}
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default LogViewer;